# THIS PROGRAM IS SO SLOW...
# but it does work

const LEFT 0
const FORWARD 1
const RIGHT 2
const WAIT 3
const ACTION 4

const VARA 0
const VARB 1
const OUT 2

# Get initial seed
ADD IO REG0
STR VARA REG0


label mainLoop

LOAD VARA REG0
STR VARB REG0
ADD VARA REG0
CALL SHR

ADD VARA REG0
ADD VARB REG1
CALL XORF

LOAD VARA REG0
STR VARB REG0
ADD VARA REG0
CALL SHL

ADD VARA REG0
ADD VARB REG1
CALL XORF

LOAD VARA REG0
STR VARB REG0
ADD VARA REG0
CALL SHR
ADD VARA REG0
CALL SHR

ADD VARA REG0
ADD VARB REG1
CALL XORF

LOAD VARA REG0
STR OUT REG0
ADD OUT REG0
CALL MOD4
LOAD OUT REG0
ADD REG0 IO

JMP mainLoop


# Bit-shift RAM[REG0] right once (RAM[REG0]/=2)
# This is really just gonna be software division by two
label SHR
LOAD REG0 REG1 # REG1 Dividend
ADD 0 REG2 # REG2 Quotient
label SHRLOOP
JMP LESS REG1 2 SHREXIT
SUB REG1 2 REG3
ADD REG3 REG1
ADD REG2 1 REG3
ADD REG3 REG2
JMP SHRLOOP
label SHREXIT
STR REG0 REG2
RET


# Bit-shift RAM[REG0] left once (RAM[REG0]*=2)
label SHL
LOAD REG0 REG1
ADD REG1 REG1 REG2
STR REG0 REG2
RET


# RAM[REG0]%=4
# This is really just gonna be software division by four
label MOD4
LOAD REG0 REG1 # REG1 Dividend
label MOD4LOOP
JMP LESS REG1 4 MOD4EXIT
SUB REG1 4 REG3
ADD REG3 REG1
JMP MOD4LOOP
label MOD4EXIT
STR REG0 REG1
RET


# XOR RAM[REG0] with RAM[REG1] store into RAM[REG0]
label XORF
LOAD REG0 REG2
LOAD REG1 REG3
XOR REG2 REG3 REG4
STR REG0 REG4
RET